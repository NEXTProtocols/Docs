{
  "openapi": "3.1.0",
  "info": {
    "title": "OpenAPI Plant Store",
    "description": "A sample API that uses a plant store as an example to demonstrate features in the OpenAPI specification",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.nextprotocol.fr"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/": {
      "get": {
        "description": "Root endpoint",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Message from the API",
                      "enum": ["JJK is the best anime of all time"]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/testapi/runsync": {
      "post": {
        "description": "Testing a serverless cluster in runpod named **Test API**",
        "requestBody": {
          "description": "Request body",
          "content": {
            "application/json": {
              "schema": {
                "required": ["name", "last_name", "age"],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "last_name": {
                    "type": "string"
                  },
                  "age": {
                    "type": "integer"
                  },
                  "sleep": {
                    "type": "integer",
                    "description": "Number of seconds the job will sleep for create a fake delay",
                    "default": 1,
                    "minimum": 1
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "delayTime": {
                      "type": "integer",
                      "description": "Number of seconds to get a worker to start the job"
                    },
                    "executionTime": {
                      "type": "integer",
                      "description": "Number of seconds the worker take for terminate the job"
                    },
                    "id": {
                      "type": "string",
                      "description": "Unique identifier for the job"
                    },
                    "output":{
                      "type": "object",
                      "properties": {
                        "content": {
                          "type": "object",
                          "properties": {
                            "say": {
                              "type": "string"
                            }
                          }
                        },
                        "message": {
                          "type": "string",
                          "enum": ["Success", "Input Error"]
                        },
                        "status_code": {
                          "type": "integer",
                          "enum": [200, 204]
                        }
                      }
                    },
                    "status": {
                      "type": "string",
                      "description": "Status of the job",
                      "enum": ["COMPLETED"]
                    },
                    "workerId": {
                      "type": "string",
                      "description": "Unique identifier for the worker"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/checkface/runsync": {
      "post": {
        "description": "Check in a face is good for a training lora ai model",
        "requestBody": {
          "description": "Request body",
          "content": {
            "application/json": {
              "schema": {
                "required": ["id", "image"],
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique identifier for name image"
                  },
                  "image": {
                    "type": "string",
                    "description": "Base64 encoded image"
                  },
                  "crop_image": {
                    "type": "boolean",
                    "description": "If it's true **and the image have a good face**, image will be cropped to the face"
                  }
              }}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "delayTime": {
                      "type": "integer",
                      "description": "Number of seconds to get a worker to start the job"
                    },
                    "executionTime": {
                      "type": "integer",
                      "description": "Number of seconds the worker take for terminate the job"
                    },
                    "id": {
                      "type": "string",
                      "description": "Unique identifier for the job"
                    },
                    "output":{
                      "type": "object",
                      "properties": {
                        "content": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "id of the image"
                            },
                            "is_good": {
                              "type": "boolean",
                              "description": "If the face is good for a training lora ai model"
                            },
                            "reason": {
                              "type": "string",
                              "description": "Reason why the face is **not good** for a training lora ai model. If the face is good, this will be **Face detected and good size**",
                              "enum": [
                                "Face detected and good size",
                                "Image too small width",
                                "Image too small height",
                                "No face",
                                "More than one face",
                                "Bad score",
                                "Face too small",
                                "Face too large"
                              ]
                            },
                            "url_image": {
                              "type": "string",
                              "description": "Url of the image"
                            }
                          }
                        },
                        "message": {
                          "type": "string",
                          "enum": ["Success", "Input Error"]
                        },
                        "status_code": {
                          "type": "integer",
                          "enum": [200, 204]
                        }
                      }
                    },
                    "status": {
                      "type": "string",
                      "description": "Status of the job",
                      "enum": ["COMPLETED"]
                    },
                    "workerId": {
                      "type": "string",
                      "description": "Unique identifier for the worker"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}